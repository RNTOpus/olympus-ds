import css from './<%= fileName %>.css';

export class <%= className %> extends HTMLElement {

  static get observedAttributes() {
    return [<% if (attributes.length > 0) { %>
      <% for (let attribute of attributes) { %> "<%= attribute.name.propertyName %>",
      <% } %>
    <% } %>
    ] as string[];
  }

  constructor() {
    super();
    this.attachShadow({ mode: 'open' });
  }

  connectedCallback() {
    this.render();
  }

  attributeChangedCallback(
    name: string,
    oldValue: string,
    newValue: string
  ) {
    if (oldValue === newValue) return;
    this[name] = newValue;
  }

  private renderStyles() {
    const style = new CSSStyleSheet();
    style.replaceSync(css?.toString());
    return style
  }

  private renderTemplate() {
    return ``
  }

  private render() {
    const { shadowRoot } = this;
    const style = this.renderStyles();
    const template = this.renderTemplate();
    if (shadowRoot) {
      shadowRoot.innerHTML = template;
      shadowRoot.adoptedStyleSheets = [style];
    }
  }

  <% if (attributes.length > 0) { %>
    <% for (let attribute of attributes) { %> get <%= attribute.name.propertyName %>() {
    return <% if (attribute.type.name === 'boolean') { %>this.hasAttribute('<%= attribute.name.propertyName %>');<% } else { %>this.getAttribute('<%= attribute.name.propertyName %>') as <%= attribute.type.name %>; <% } %>
  }
  set <%= attribute.name.propertyName %>(<%= attribute.name.propertyName %>: <%= attribute.type.name %>) {
    <%= attribute.name.propertyName %>
      ? this.setAttribute('<%= attribute.name.propertyName %>', <% if (attribute.type.name === 'boolean') { %>''<% } else { %><%= attribute.name.propertyName %><% } %>)
      : this.removeAttribute('<%= attribute.name.propertyName %>');
  }

    <% } %>
  <% } %>

}

if (!customElements.get('ods-<%= fileName %>')) {
  customElements.define('ods-<%= fileName %>', <%= className %>);
}

export default <%= className %>;
