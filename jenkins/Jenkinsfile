pipeline {
  agent {
    label 'docker-build'
  }
  environment {
    NX_BRANCH = env.BRANCH_NAME.replace('PR-', '')
    BASE_SHA = 'HEAD~1'
    NPMJS_TOKEN = credentials('opus-nexus-npm-auth')
    NPM_CONFIG_CACHE = "${WORKSPACE}/.npm"
    PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD = 1
    PLAYWRIGHT_BROWSERS_PATH = '${WORKSPACE}/playwright'
    // AWS_DEFAULT_REGION = credentials('opus-olympus-ds-s3-bucket-default-region')
    // AWS_SECRET_ACCESS_KEY = credentials('opus-olympus-ds-s3-bucket-secret-access-key')
    // AWS_ACCESS_KEY_ID = credentials('opus-olympus-ds-s3-bucket-access-key')
  }
  // /home/opus/jenkins_slave/workspace/us-Olympus-Design-System_develop/${env.WORKSPACE}/playwright/chromium-1028/chrome-linux/chrome
  stages {
    stage('Prepare') {
      when { anyOf { branch 'master'; branch 'develop'; branch pattern: '^(hotfix/.*|release/.*)', comparator: 'REGEXP' } }
      agent {
        dockerfile {
          filename 'Dockerfile.build'
          dir 'jenkins'
          reuseNode true
        }
      }
      steps {
        script {
          env.BASE_SHA = env.CHANGE_ID ? 'origin/${env.CHANGE_TARGET}' : 'HEAD~1'
          sh 'yarn install --frozen-lockfile'
          sh 'yarn add playwright-chromium@1.22.2 playwright-webkit@1.22.2 playwright-firefox@1.22.2'
        }
      }
    }
    // /home/opus/jenkins_slave/workspace/us-Olympus-Design-System_develop/node_modules/@web/test-runner-playwright/node_modules/playwright-core/.local-browsers/chromium-1028/chrome-linux/chrome
    // /home/opus/jenkins_slave/workspace/us-Olympus-Design-System_develop/node_modules/@web/test-runner-playwright/node_modules/playwright-core/.local-browsers/firefox-1357/firefox/firefox

    stage('Lint') {
      when { anyOf { branch 'master'; branch 'develop'; branch pattern: '^(hotfix/.*|release/.*)', comparator: 'REGEXP' } }
      agent {
        dockerfile {
          filename 'Dockerfile.build'
          dir 'jenkins'
          reuseNode true
        }
      }
      steps {
        script {
          sh 'npx nx workspace-lint'
          sh 'npx nx run-many --target=lint --projects=components,tokens'
        }
      }
    }
    stage('Test') {
      when { anyOf { branch 'master'; branch 'develop'; branch pattern: '^(hotfix/.*|release/.*)', comparator: 'REGEXP' } }
      agent {
        dockerfile {
          filename 'Dockerfile.build'
          dir 'jenkins'
          reuseNode true
        }
      }
      steps {
        script {
          sh 'npx nx run components:test'
        }
      }
    }
    stage('Build package') {
      when { anyOf { branch 'master' } }
      agent {
        dockerfile {
          filename 'Dockerfile.build'
          dir 'jenkins'
          reuseNode true
        }
      }
      steps {
        script {
          sh "npx nx affected --base=${BASE_SHA} --target=build --parallel=3"
        }
      }
    }
    stage('Publish package') {
      when { anyOf { branch 'master' } }
      agent {
        dockerfile {
          filename 'Dockerfile.build'
          dir 'jenkins'
          reuseNode true
        }
      }
      steps {
        script {
          sh 'echo "registry=https://nexus.dev.opus-software.com.br/repository/npm-opus-private/_auth=${NPMJS_TOKEN}" >> ~/.npmrc'
          sh 'npx nx affected --base=HEAD~1 --target=publish --parallel=3'
        }
      }
    }
    stage('Build documentation') {
      when { anyOf { branch 'master' } }
      agent {
        dockerfile {
          filename 'Dockerfile.build'
          dir 'jenkins'
          reuseNode true
        }
      }
      steps {
        script {
          sh 'yarn docs:build'
        }
      }
    }
    // stage('Deploy documentation') {
    //   when { anyOf { branch 'master' } }
    //   agent {
    //     dockerfile {
    //       filename 'Dockerfile.build'
    //       dir 'jenkins'
    //       reuseNode true
    //     }
    //   }
    //   steps {
    //     script {
    //       sh "aws configure set region ${AWS_DEFAULT_REGION}"
    //       sh "aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}"
    //       sh "aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}"
    //       sh 'aws s3 sync ../docs/.vitepress/dist s3://olympus-ds'
    //     }
    //   }
    // }
  }
}
